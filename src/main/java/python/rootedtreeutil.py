# -*- coding: utf-8 -*-
"""rootedtreeutil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzy6F9LqcM_PTO5WGphYVHcVp4jd1OxA

Este notebook contém funções que retornam diferentes informações ou realizam operações sobre árvores enraizadas.

O código pode ser importado em seu notebook usando o seguinte comando:

!wget https://raw.githubusercontent.com/pdlmachado/GraphTheory-JGraphT/master/src/main/java/python/treeutil.py

Testes para as funções encontram-se neste notebook:

https://colab.research.google.com/drive/1Qz0Afd8EMb_EEQSYB-fb59cM5qACQYVU?usp=sharing
"""

# Se desejar compilar, descomente o(s) comando(s) abaixo
#!pip install jgrapht
#!wget https://raw.githubusercontent.com/pdlmachado/GraphTheory-JGraphT/master/src/main/java/python/getutil.py

# Importando funções
from jgrapht import create_graph
from jgrapht.properties import is_tree
from getutil import get_dist

"""## is_rootedTree

Verifica se um grafo é uma árvore enraizada
"""

def is_rootedTree(tree):
  if not (tree.type.directed):
    return False
  root = list(filter(lambda v: list(tree.inedges_of(v)) == [],tree.vertices))
  if len(root) == 1:
    notroot = [v for v in tree.vertices if v not in root]
    return all(len(list(tree.inedges_of(v)))==1 for v in notroot)
  return False

"""## parent

Retorna o predecessor (parent) de um vértice v em uma árvore enraizada
"""

def parent (v,rtree):
  if is_rootedTree(rtree):
    inedges = list(rtree.inedges_of(v))
    if len(inedges) == 0:
      return None # root
    else:
      return rtree.edge_source(inedges[0])
  else: # todo vértice tem apenas um predecessor em uma árvore enraizada
    return None

"""## children

Retorna uma lista com os sucessores (children) de um vértice v em uma árvore enraizada
"""

def children (v,rtree):
  if is_rootedTree(rtree):
    oute = rtree.outedges_of(v)
    return [rtree.edge_target(e) for e in oute]
  else:
    return None

"""## is_root

Determina se um vértice v é a raiz em uma árvore enraizada
"""

def is_root(v,rtree):
  if (is_rootedTree(rtree)):
    return list(rtree.inedges_of(v))==[]
  else:
    return None

"""## is_leaf

Determina se um vértice v é folha em uma árvore enraizada
"""

def is_leaf(v,rtree):
  if (is_rootedTree(rtree)):
    return list(rtree.outedges_of(v))==[]
  else:
    return None

"""## get_rootedTree

Retorna uma árvore enraizada (dag) para uma árvore, sendo root a raiz
"""

def get_rootedTree(tree,root):
  if (not is_tree(tree)) or (root not in tree.vertices):
    return None
  # cria instância do grafo orientado com opção dag=True
  rtree = create_graph(dag=True,weighted=False)
  # adiciona vértices no grafo
  rtree.add_vertices_from(tree.vertices)
  # adiciona arcos no grafo a partir das arestas de tree
  # considerando como source o terminal com menor nível (distância de root)
  for e in tree.edges:
    s = tree.edge_source(e)
    t = tree.edge_target(e)
    if get_dist(tree,root,s) < get_dist(tree,root,t):
      rtree.add_edge(s,t)
    else:
      rtree.add_edge(t,s)
  return rtree